{"version":3,"sources":["component/header.js","component/selection.js","component/input.js","component/message.js","container/calculator.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","ScaleSelection","props","console","log","htmlFor","onChange","e","target","value","onChangeScale","id","scale","scaleNames","c","f","TemperatureInput","placeholder","concat","onInputTemperature","temperature","farenheitToCelsius","farenheit","Message","celsius","convert","input","parseFloat","Number","isNaN","output","Math","round","toString","tryConvert","AppCalculator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChangeScale","newScale","setState","handleInputTemperature","newTemperature","state","header","selection","message","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","calculator","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5cba4f1a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () =>  <h1>¿Mi agua hervirá?</h1>\r\n\r\nexport default Header","import React from 'react';\r\n\r\nconst ScaleSelection = (props) => {\r\n\r\n console.log(props)\r\n\r\n const handleChange = (e) => {\r\n  console.log(e.target.value)\r\n   props.onChangeScale(e.target.value)\r\n }\r\n\r\n\r\n return (\r\n  <div>\r\n    <label htmlFor=\"scale-select\">Choose a scale:</label>\r\n    <br/>\r\n    <select onChange = {handleChange} id=\"scale-select\" value={props.scale}>\r\n      <option value=\"\">--Please choose an option--</option>\r\n      <option value=\"c\">Celsius</option>\r\n      <option value=\"f\">Farenheit</option>\r\n    </select>\r\n </div>\r\n )\r\n}\r\n\r\nexport default ScaleSelection","import React from 'react';\r\n\r\nconst scaleNames = {\r\n c: 'Celsius',\r\n f: 'Farenheit'\r\n}\r\n\r\nconst TemperatureInput = (props) => {\r\n const handleInput = (e) => {\r\n   console.log(e.target.value)\r\n   props.onInputTemperature(e.target.value)\r\n }\r\n\r\n return (\r\n  <div>\r\n  <label htmlFor = {props.scale} >Coloca los grados {scaleNames[props.scale]}</label>\r\n  <br/>\r\n  <input \r\n   id = {props.scale}\r\n   placeholder = {scaleNames[props.scale] ? `grados ${scaleNames[props.scale]}`: 'ingrese'  }\r\n   onChange = {handleInput}\r\n   value = {props.temperature}\r\n  />\r\n </div>\r\n )\r\n} \r\n\r\nexport default TemperatureInput\r\n","import React from 'react'\r\n\r\n\r\nconst tryConvert = (temperature, convert) => {\r\n console.log(typeof temperature)\r\n const input = parseFloat(temperature)\r\n if(Number.isNaN(input)){\r\n  return ''\r\n }\r\n const output = convert(input)\r\n const rounded = Math.round(output * 1000) / 1000;\r\n return rounded.toString();\r\n}\r\n\r\nconst farenheitToCelsius = (farenheit) => (farenheit - 32) * 5 / 9;\r\n\r\n\r\nconst Message = (props) => {\r\nconst celsius = props.scale === 'c' ? props.temperature : tryConvert(props.temperature, farenheitToCelsius);\r\n\r\n return (\r\n    <div>\r\n    <h3>{celsius >= 100 ? 'El agua hervirá' : 'El agua no hervirá'}</h3>\r\n    </div>\r\n   )\r\n}\r\n\r\nexport default Message","import React from 'react';\r\nimport Header from '../component/header';\r\nimport ScaleSelection from '../component/selection';\r\nimport TemperatureInput from '../component/input';\r\nimport Message from '../component/message';\r\n\r\nclass AppCalculator extends React.Component {\r\n constructor(props){\r\n  super(props);\r\n  this.state = {\r\n   scale : 'ingrese escala',\r\n   temperature : ''\r\n  }\r\n }\r\n\r\n handleChangeScale = (newScale) => {\r\n  this.setState({\r\n   scale : newScale,\r\n   temperature : ''\r\n  })\r\n }\r\n\r\n handleInputTemperature = (newTemperature) => {\r\n  this.setState({\r\n   temperature : newTemperature\r\n  })\r\n }\r\n\r\n\r\n render(){\r\n  return (\r\n   <div>\r\n   <Header />\r\n   <ScaleSelection scale={this.state.scale} onChangeScale = {this.handleChangeScale} />\r\n   <TemperatureInput scale = {this.state.scale} onInputTemperature = {this.handleInputTemperature} temperature = {this.state.temperature}/>\r\n   <Message scale={this.state.scale} temperature = {this.state.temperature} />\r\n   </div>\r\n  )\r\n }\r\n}\r\n\r\nexport default AppCalculator","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppCalculator from './container/calculator';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppCalculator />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}